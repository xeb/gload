// Code generated by protoc-gen-go.
// source: time.proto
// DO NOT EDIT!

/*
Package time is a generated protocol buffer package.

It is generated from these files:
	time.proto

It has these top-level messages:
	TimeRequest
	TimeReply
*/
package time

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type TimeRequest struct {
}

func (m *TimeRequest) Reset()         { *m = TimeRequest{} }
func (m *TimeRequest) String() string { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()    {}

type TimeReply struct {
	TimeValue int64 `protobuf:"varint,1,opt" json:"TimeValue,omitempty"`
}

func (m *TimeReply) Reset()         { *m = TimeReply{} }
func (m *TimeReply) String() string { return proto.CompactTextString(m) }
func (*TimeReply) ProtoMessage()    {}

func init() {
}

// Client API for Timer service

type TimerClient interface {
	GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error)
}

type timerClient struct {
	cc *grpc.ClientConn
}

func NewTimerClient(cc *grpc.ClientConn) TimerClient {
	return &timerClient{cc}
}

func (c *timerClient) GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := grpc.Invoke(ctx, "/time.Timer/GetTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Timer service

type TimerServer interface {
	GetTime(context.Context, *TimeRequest) (*TimeReply, error)
}

func RegisterTimerServer(s *grpc.Server, srv TimerServer) {
	s.RegisterService(&_Timer_serviceDesc, srv)
}

func _Timer_GetTime_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(TimeRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TimerServer).GetTime(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Timer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "time.Timer",
	HandlerType: (*TimerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _Timer_GetTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
